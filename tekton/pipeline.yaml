apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  workspaces:
    - name: pipeline-workspace
  params:
    - name: repo-url
      type: string
      description: Git URL of the application repo
    - name: branch
      type: string
      default: main
      description: Git branch to build
    - name: build-image
      type: string
      description: Full image name (including tag) to build & deploy
  tasks:
    # 1) wipe the workspace
    - name: init
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: pipeline-workspace

    # 2) clone source
    - name: clone
      runAfter: [init]
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: pipeline-workspace
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)
        - name: deleteExisting
          value: "true"
        - name: submodules
          value: "true"
        - name: depth
          value: "1"

    # 3) lint (runs in parallel with tests)
    - name: lint
      runAfter: [clone]
      taskRef:
        name: flake8
      workspaces:
        - name: source
          workspace: pipeline-workspace

    # 4) tests (your new nose task)
    - name: tests
      runAfter: [clone]
      taskRef:
        name: nose
      workspaces:
        - name: source
          workspace: pipeline-workspace
      params:
        - name: database_uri
          value: "sqlite:///test.db"
        - name: args
          value: "-v --with-spec --spec-color"

    # 5) build & push image
    - name: build
      runAfter: [lint, tests]
      taskRef:
        name: build-and-push
      workspaces:
        - name: source
          workspace: pipeline-workspace
      params:
        - name: image
          value: $(params.build-image)

    # 6) deploy that image (your deploy/oc task applies the manifest)
    - name: deploy
      runAfter: [build]
      taskRef:
        name: oc
      params:
        - name: image
          value: $(params.build-image)
