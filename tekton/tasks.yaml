---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: echo
spec:
  description: This task will echo the message.
  params:
    - name: message
      description: The message to echo
      type: string
  steps:
    - name: echo-message
      image: alpine:3
      command: [/bin/echo]
      args: ["$(params.message)"]

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all of the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: lint
spec:
  description: Run flake8 on the provided input.
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to flake8
      type: string
      default: "."
  steps:
    - name: flake8
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "***** Installing dependencies *****"
        python -m pip install --upgrade pip wheel
        pip install -qr requirements.txt
        echo "***** Running flake8 *****"
        flake8 $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  description: This task will run nosetests on the provided input.
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
    - name: database_uri
      description: Database connection string
      type: string
      default: "sqlite:///test.db"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      env:
        - name: DATABASE_URI
          value: $(params.database_uri)
      script: |
        #!/bin/bash
        set -e
        echo "***** Installing dependencies *****"
        python -m pip install --upgrade pip wheel
        pip install -qr requirements.txt
        echo "***** Running nosetests with: $(params.args) *****"
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push
spec:
  description: Build the container image from the repo and push to the registry.
  workspaces:
    - name: source
  params:
    - name: image
      description: Target image (registry/namespace/name:tag)
      type: string
  steps:
    - name: build-and-push
      image: quay.io/buildah/stable:latest
      securityContext:
        privileged: true
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        echo "STEP: building $(params.image)"
        buildah bud --format docker -t "$(params.image)" .
        echo "STEP: pushing $(params.image)"
        buildah push --tls-verify=false "$(params.image)"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc
spec:
  description: Replace the image in deploy/deployment.yaml and apply to the cluster.
  workspaces:
    - name: source
  params:
    - name: image
      description: Image to deploy
      type: string
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:4.12
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        echo "Updating manifest..."
        sed "s|IMAGE_NAME_HERE|$(params.image)|g" deploy/deployment.yaml > deploy/deployment.rendered.yaml
        cat deploy/deployment.rendered.yaml
        echo "Deploying to OpenShift..."
        oc apply -f deploy/deployment.rendered.yaml
        oc rollout status deploy/accounts || true
        oc get pods -l app=accounts
